#!/usr/bin/env python3

from garminconnect import Garmin
from dotenv import load_dotenv
import os

load_dotenv()
tokenstore = '~/.garminconnect'

print('üèãÔ∏è Cr√©ation du PUSH Alan Ritchson avec la structure EXACTE de Sculpt...')

try:
    garmin = Garmin()
    garmin.login(tokenstore)
    
    # Exercices PUSH Alan Ritchson avec mapping Garmin valid√©
    push_exercises = [
        {
            'category': 'BENCH_PRESS',
            'exerciseName': 'BARBELL_BENCH_PRESS',
            'reps': 10,
            'rest': 180,  # 3 minutes pour le mouvement principal
            'sets': 5,
            'description': 'D√©velopp√© couch√© barre - Mouvement principal lourd'
        },
        {
            'category': 'BENCH_PRESS',
            'exerciseName': 'INCLINE_DUMBBELL_BENCH_PRESS',
            'reps': 16,
            'rest': 90,  # 90 secondes
            'sets': 4,
            'description': 'D√©velopp√© inclin√© halt√®res - Volume Ritchson'
        },
        {
            'category': 'FLY',
            'exerciseName': 'INCLINE_CABLE_FLY',
            'reps': 20,
            'rest': 90,
            'sets': 4,
            'description': '√âcart√© c√¢ble inclin√© - Volume pectoraux'
        },
        {
            'category': 'SHOULDER_PRESS',
            'exerciseName': 'DUMBBELL_SHOULDER_PRESS',
            'reps': 18,
            'rest': 75,  # 75 secondes
            'sets': 4,
            'description': 'D√©velopp√© militaire halt√®res - √âpaules'
        },
        {
            'category': 'LATERAL_RAISE',
            'exerciseName': 'DUMBBELL_LATERAL_RAISE',
            'reps': 22,
            'rest': 75,
            'sets': 4,
            'description': '√âl√©vations lat√©rales - Drop set derni√®re s√©rie'
        },
        {
            'category': 'TRICEP_EXTENSION',
            'exerciseName': 'TRICEP_PUSH_DOWN',
            'reps': 15,
            'rest': 60,  # Superset
            'sets': 4,
            'description': 'Extension triceps c√¢ble (Superset avec dips)'
        },
        {
            'category': 'DIP',
            'exerciseName': 'ASSISTED_DIP',
            'reps': 12,
            'rest': 60,
            'sets': 4,
            'description': 'Dips assist√©s (Superset)'
        },
        {
            'category': 'FLY',
            'exerciseName': 'CABLE_FLY',
            'reps': 15,  # "Au max" mais on met une base
            'rest': 45,
            'sets': 3,
            'description': 'Finition Ritchson - √âcart√© c√¢ble MAX REPS'
        },
        {
            'category': 'ROW',
            'exerciseName': 'FACE_PULL',
            'reps': 25,
            'rest': 60,
            'sets': 2,
            'description': 'Tirage face - Arri√®re d\'√©paules'
        }
    ]
    
    # Construire les RepeatGroups selon la structure Sculpt (M√äME FORMAT)
    workout_steps = []
    step_order = 1
    
    for i, exercise in enumerate(push_exercises):
        # Cr√©er un RepeatGroup pour chaque exercice
        repeat_group = {
            'type': 'RepeatGroupDTO',
            'stepOrder': step_order,
            'stepType': {
                'stepTypeId': 6,
                'stepTypeKey': 'repeat'
            },
            'childStepId': i + 1,
            'numberOfIterations': exercise['sets'],
            'workoutSteps': [
                # √âtape exercice
                {
                    'type': 'ExecutableStepDTO',
                    'stepOrder': step_order + 1,
                    'stepType': {
                        'stepTypeId': 3,
                        'stepTypeKey': 'interval'
                    },
                    'childStepId': i + 1,
                    'description': exercise['description'],
                    'endCondition': {
                        'conditionTypeId': 10,
                        'conditionTypeKey': 'reps'
                    },
                    'endConditionValue': float(exercise['reps']),
                    'targetType': {
                        'workoutTargetTypeId': 1,
                        'workoutTargetTypeKey': 'no.target'
                    },
                    'category': exercise['category'],
                    'exerciseName': exercise['exerciseName'],
                    'strokeType': {
                        'strokeTypeId': 0,
                        'strokeTypeKey': None
                    },
                    'equipmentType': {
                        'equipmentTypeId': 0,
                        'equipmentTypeKey': None
                    }
                },
                # √âtape repos
                {
                    'type': 'ExecutableStepDTO',
                    'stepOrder': step_order + 2,
                    'stepType': {
                        'stepTypeId': 5,
                        'stepTypeKey': 'rest'
                    },
                    'childStepId': i + 1,
                    'endCondition': {
                        'conditionTypeId': 2,
                        'conditionTypeKey': 'time'
                    },
                    'endConditionValue': float(exercise['rest']),
                    'targetType': {
                        'workoutTargetTypeId': 1,
                        'workoutTargetTypeKey': 'no.target'
                    },
                    'strokeType': {
                        'strokeTypeId': 0,
                        'strokeTypeKey': None
                    },
                    'equipmentType': {
                        'equipmentTypeId': 0,
                        'equipmentTypeKey': None
                    }
                }
            ],
            'endConditionValue': float(exercise['sets']),
            'endCondition': {
                'conditionTypeId': 7,
                'conditionTypeKey': 'iterations'
            },
            'skipLastRestStep': False,
            'smartRepeat': False
        }
        
        workout_steps.append(repeat_group)
        step_order += 3  # Incr√©menter pour le prochain groupe
    
    # Construire l'entra√Ænement complet avec la structure Sculpt
    push_workout = {
        'workoutName': 'PUSH Alan Ritchson - Sculpt Format',
        'description': 'S√©ance A - Pectoraux, √âpaules, Triceps - Style Alan Ritchson - Dur√©e 60-75 min',
        'sportType': {
            'sportTypeId': 9,
            'sportTypeKey': 'hiit'  # M√™me type que Sculpt
        },
        'estimatedDurationInSecs': 0,
        'estimatedDistanceInMeters': 0.0,
        'workoutSegments': [
            {
                'segmentOrder': 1,
                'sportType': {
                    'sportTypeId': 9,
                    'sportTypeKey': 'hiit'
                },
                'workoutSteps': workout_steps
            }
        ]
    }
    
    print(f'üìä Entra√Ænement g√©n√©r√© avec {len(workout_steps)} exercices')
    print('üì§ Upload du PUSH Alan Ritchson vers Garmin Connect...')
    
    result = garmin.upload_workout(push_workout)
    
    print('üéâ PUSH ALAN RITCHSON CR√â√â AVEC SUCC√àS !')
    print('=' * 60)
    print(f'üìã Nom: PUSH Alan Ritchson - Sculpt Format')
    print(f'üéØ Type: HIIT (format compatible montre)')
    print(f'üí™ Focus: Pectoraux, √âpaules, Triceps')
    print(f'‚è±Ô∏è Dur√©e: 60-75 minutes')
    print()
    print('üèãÔ∏è Programme PUSH d√©taill√©:')
    print('   1. üí™ D√âVELOPP√â COUCH√â BARRE - 5√ó10 reps (3min repos)')
    print('   2. üìà D√âVELOPP√â INCLIN√â HALT√àRES - 4√ó16 reps (90sec)')  
    print('   3. üéØ √âCART√â C√ÇBLE INCLIN√â - 4√ó20 reps (90sec)')
    print('   4. üèÜ D√âVELOPP√â MILITAIRE HALT√àRES - 4√ó18 reps (75sec)')
    print('   5. üî• √âL√âVATIONS LAT√âRALES - 4√ó22 reps (75sec)')
    print('   6. ‚ö° EXTENSION TRICEPS C√ÇBLE - 4√ó15 reps (60sec superset)')
    print('   7. ‚ö° DIPS ASSIST√âS - 4√ó12 reps (60sec superset)')
    print('   8. üéØ √âCART√â C√ÇBLE FINITION - 3√ó15 reps MAX (45sec)')
    print('   9. üé™ TIRAGE FACE - 2√ó25 reps (60sec)')
    print()
    print('‚úÖ Compatible 100% avec votre montre Garmin !')
    print(f'üöÄ R√©sultat API: {result}')
    print('üì± Synchronisez et cherchez "PUSH Alan Ritchson - Sculpt Format"')

except Exception as e:
    print(f'‚ùå Erreur: {e}')
    import traceback
    traceback.print_exc()
